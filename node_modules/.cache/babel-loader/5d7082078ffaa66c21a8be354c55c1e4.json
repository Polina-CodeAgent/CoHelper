{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport firebase from 'firebase';\n\nconst useForm = (callback, validate) => {\n  const [values, setValues] = useState({\n    username: '',\n    activity: '',\n    email: '',\n    city: '',\n    password: '',\n    password2: '',\n    findFor: {\n      providers: false,\n      clients: false,\n      investors: false,\n      advertising: false\n    }\n  });\n  const db = firebase.firestore();\n  const [errors, setErrors] = useState({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setValues({ ...values,\n      [name]: value\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setErrors(validate(values));\n    setIsSubmitting(true);\n  };\n\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && isSubmitting) {\n      callback();\n      let generatedId = db.collection('users').doc().id;\n      db.collection(\"users\").doc(generatedId).update({\n        'token': generatedId,\n        'city': values.city,\n        'activity': values.activity,\n        'email': values.email,\n        'password': values.password,\n        'companyName': values.username,\n        'findFor': values.findFor\n      });\n      console.log(generatedId);\n    }\n  }, [errors]);\n  return {\n    handleChange,\n    handleSubmit,\n    values,\n    errors\n  };\n};\n\nexport default useForm;","map":{"version":3,"sources":["C:/Users/a-pol/CoHelper/src/components/RegistrationForm/Elements/useForm.js"],"names":["useState","useEffect","firebase","useForm","callback","validate","values","setValues","username","activity","email","city","password","password2","findFor","providers","clients","investors","advertising","db","firestore","errors","setErrors","isSubmitting","setIsSubmitting","handleChange","e","name","value","target","handleSubmit","preventDefault","Object","keys","length","generatedId","collection","doc","id","update","console","log"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,QAAP,MAAqB,UAArB;;AAEA,MAAMC,OAAO,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACtC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC;AACnCQ,IAAAA,QAAQ,EAAE,EADyB;AAEnCC,IAAAA,QAAQ,EAAE,EAFyB;AAGnCC,IAAAA,KAAK,EAAE,EAH4B;AAInCC,IAAAA,IAAI,EAAE,EAJ6B;AAKnCC,IAAAA,QAAQ,EAAE,EALyB;AAMnCC,IAAAA,SAAS,EAAE,EANwB;AAOnCC,IAAAA,OAAO,EAAE;AAAEC,MAAAA,SAAS,EAAE,KAAb;AAAoBC,MAAAA,OAAO,EAAE,KAA7B;AAAoCC,MAAAA,SAAS,EAAE,KAA/C;AAAsDC,MAAAA,WAAW,EAAE;AAAnE;AAP0B,GAAD,CAApC;AASA,QAAMC,EAAE,GAAGjB,QAAQ,CAACkB,SAAT,EAAX;AAEA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBtB,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACuB,YAAD,EAAeC,eAAf,IAAkCxB,QAAQ,CAAC,KAAD,CAAhD;;AAEA,QAAMyB,YAAY,GAAGC,CAAC,IAAI;AACxB,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBF,CAAC,CAACG,MAA1B;AACAtB,IAAAA,SAAS,CAAC,EACR,GAAGD,MADK;AAER,OAACqB,IAAD,GAAQC;AAFA,KAAD,CAAT;AAID,GAND;;AAQA,QAAME,YAAY,GAAGJ,CAAC,IAAI;AACxBA,IAAAA,CAAC,CAACK,cAAF;AACAT,IAAAA,SAAS,CAACjB,QAAQ,CAACC,MAAD,CAAT,CAAT;AACAkB,IAAAA,eAAe,CAAC,IAAD,CAAf;AACD,GAJD;;AAMAvB,EAAAA,SAAS,CACP,MAAM;AACJ,QAAI+B,MAAM,CAACC,IAAP,CAAYZ,MAAZ,EAAoBa,MAApB,KAA+B,CAA/B,IAAoCX,YAAxC,EAAsD;AACpDnB,MAAAA,QAAQ;AACR,UAAI+B,WAAW,GAAGhB,EAAE,CAACiB,UAAH,CAAc,OAAd,EAAuBC,GAAvB,GAA6BC,EAA/C;AACAnB,MAAAA,EAAE,CAACiB,UAAH,CAAc,OAAd,EAAuBC,GAAvB,CAA2BF,WAA3B,EAAwCI,MAAxC,CAA+C;AAC7C,iBAASJ,WADoC;AAE7C,gBAAQ7B,MAAM,CAACK,IAF8B;AAG7C,oBAAYL,MAAM,CAACG,QAH0B;AAI7C,iBAASH,MAAM,CAACI,KAJ6B;AAK7C,oBAAYJ,MAAM,CAACM,QAL0B;AAM7C,uBAAeN,MAAM,CAACE,QANuB;AAO7C,mBAAWF,MAAM,CAACQ;AAP2B,OAA/C;AASA0B,MAAAA,OAAO,CAACC,GAAR,CAAYN,WAAZ;AACD;AACF,GAhBM,EAiBP,CAACd,MAAD,CAjBO,CAAT;AAoBA,SAAO;AAAEI,IAAAA,YAAF;AAAgBK,IAAAA,YAAhB;AAA8BxB,IAAAA,MAA9B;AAAsCe,IAAAA;AAAtC,GAAP;AACD,CAlDD;;AAoDA,eAAelB,OAAf","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport firebase from 'firebase';\r\n\r\nconst useForm = (callback, validate) => {\r\n  const [values, setValues] = useState({\r\n    username: '',\r\n    activity: '',\r\n    email: '',\r\n    city: '',\r\n    password: '',\r\n    password2: '',\r\n    findFor: { providers: false, clients: false, investors: false, advertising: false },\r\n  });\r\n  const db = firebase.firestore();\r\n\r\n  const [errors, setErrors] = useState({});\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.target;\r\n    setValues({\r\n      ...values,\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    setErrors(validate(values));\r\n    setIsSubmitting(true);\r\n  };\r\n\r\n  useEffect(\r\n    () => {\r\n      if (Object.keys(errors).length === 0 && isSubmitting) {\r\n        callback();\r\n        let generatedId = db.collection('users').doc().id;\r\n        db.collection(\"users\").doc(generatedId).update({\r\n          'token': generatedId,\r\n          'city': values.city,\r\n          'activity': values.activity,\r\n          'email': values.email,\r\n          'password': values.password,\r\n          'companyName': values.username,\r\n          'findFor': values.findFor,\r\n        });\r\n        console.log(generatedId);\r\n      }\r\n    },\r\n    [errors]\r\n  );\r\n\r\n  return { handleChange, handleSubmit, values, errors };\r\n};\r\n\r\nexport default useForm;"]},"metadata":{},"sourceType":"module"}