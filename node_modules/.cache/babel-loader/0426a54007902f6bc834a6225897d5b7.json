{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport firebase from 'firebase';\n\nconst useForm = (callback, validate) => {\n  const [values, setValues] = useState({\n    username: '',\n    activity: '',\n    email: '',\n    city: '',\n    password: '',\n    password2: '',\n    findFor: {\n      providers: false,\n      clients: false,\n      investors: false,\n      advertising: false\n    }\n  });\n  const db = firebase.firestore();\n  const [errors, setErrors] = useState({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setValues({ ...values,\n      [name]: value\n    });\n  };\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    let valid_em = [];\n    const querySnapshot = await db.collection(\"users\").get();\n    querySnapshot.forEach(doc => {\n      valid_em.push(doc.data().email);\n    });\n    setIsSubmitting(true);\n    setErrors(validate(values, valid_em));\n  }\n\n  ;\n  useEffect(() => {\n    console.log(Object.keys(errors).length === 0 && isSubmitting, Object.keys(errors).length, isSubmitting);\n\n    if (Object.keys(errors).length === 0 && isSubmitting) {\n      console.log('true');\n      callback();\n      let generatedId = db.collection('users').doc().id;\n      db.collection('users').doc(generatedId).set({\n        'token': generatedId,\n        'city': values.city,\n        'activity': values.activity,\n        'email': values.email,\n        'password': values.password,\n        'companyName': values.username,\n        'findFor': values.findFor\n      });\n    }\n  }, [errors]);\n  return {\n    handleChange,\n    handleSubmit,\n    values,\n    errors\n  };\n};\n\nexport default useForm;","map":{"version":3,"sources":["C:/Users/a-pol/CoHelper/src/components/RegistrationForm/Elements/useForm.js"],"names":["useState","useEffect","firebase","useForm","callback","validate","values","setValues","username","activity","email","city","password","password2","findFor","providers","clients","investors","advertising","db","firestore","errors","setErrors","isSubmitting","setIsSubmitting","handleChange","e","name","value","target","handleSubmit","preventDefault","valid_em","querySnapshot","collection","get","forEach","doc","push","data","console","log","Object","keys","length","generatedId","id","set"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport firebase from 'firebase';\r\n\r\nconst useForm = (callback, validate) => {\r\n  const [values, setValues] = useState({\r\n    username: '',\r\n    activity: '',\r\n    email: '',\r\n    city: '',\r\n    password: '',\r\n    password2: '',\r\n    findFor: { providers: false, clients: false, investors: false, advertising: false },\r\n  });\r\n  const db = firebase.firestore();\r\n\r\n  const [errors, setErrors] = useState({});\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.target;\r\n    setValues({\r\n      ...values,\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  async function handleSubmit(e) {\r\n    e.preventDefault();\r\n    let valid_em = []\r\n    const querySnapshot = await db.collection(\"users\").get();\r\n    querySnapshot.forEach((doc) => {\r\n      valid_em.push(doc.data().email);\r\n    });\r\n    setIsSubmitting(true);\r\n    setErrors(validate(values, valid_em));\r\n  };\r\n\r\n  useEffect(\r\n    () => {\r\n      console.log(Object.keys(errors).length === 0 && isSubmitting, Object.keys(errors).length, isSubmitting)\r\n      if (Object.keys(errors).length === 0 && isSubmitting) {\r\n        console.log('true')\r\n        callback();\r\n        let generatedId = db.collection('users').doc().id;\r\n        db.collection('users').doc(generatedId).set({\r\n          'token': generatedId,\r\n          'city': values.city,\r\n          'activity': values.activity,\r\n          'email': values.email,\r\n          'password': values.password,\r\n          'companyName': values.username,\r\n          'findFor': values.findFor,\r\n        });\r\n      }\r\n\r\n    },\r\n    [errors]\r\n  );\r\n  return { handleChange, handleSubmit, values, errors };\r\n};\r\n\r\nexport default useForm;"]},"metadata":{},"sourceType":"module"}