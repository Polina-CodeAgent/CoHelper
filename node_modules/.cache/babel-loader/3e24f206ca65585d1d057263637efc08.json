{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport firebase from 'firebase';\nimport firestore from \"firebase\";\n\nconst useForm = (callback, validate) => {\n  const [values, setValues] = useState({\n    username: '',\n    activity: '',\n    email: '',\n    city: '',\n    password: '',\n    password2: '',\n    findFor: {\n      providers: '',\n      clients: '',\n      investors: '',\n      advertising: ''\n    }\n  });\n  const db = firebase.firestore();\n  const [errors, setErrors] = useState({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setValues({ ...values,\n      [name]: value\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setErrors(validate(values));\n    setIsSubmitting(true);\n  };\n\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && isSubmitting) {\n      callback(); // token = db.instance.collection('users').doc().id;\n\n      db.collection(\"users\").add({\n        // 'token': token,\n        'city': 'Rostov',\n        'desc': 'Company description',\n        'email': 'groshevdg@gmail.com',\n        'password': '123456',\n        'companyName': 'CoHelper'\n      }).then(docRef => {\n        console.log(\"Document written with ID: \", docRef.id);\n      }).catch(error => {\n        console.error(\"Error adding document: \", error);\n      });\n    }\n  }, [errors]);\n  return {\n    handleChange,\n    handleSubmit,\n    values,\n    errors\n  };\n};\n\nexport default useForm;","map":{"version":3,"sources":["C:/Users/a-pol/CoHelper/src/components/RegistrationForm/Elements/useForm.js"],"names":["useState","useEffect","firebase","firestore","useForm","callback","validate","values","setValues","username","activity","email","city","password","password2","findFor","providers","clients","investors","advertising","db","errors","setErrors","isSubmitting","setIsSubmitting","handleChange","e","name","value","target","handleSubmit","preventDefault","Object","keys","length","collection","add","then","docRef","console","log","id","catch","error"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,SAAP,MAAsB,UAAtB;;AAEA,MAAMC,OAAO,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACtC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC;AACnCS,IAAAA,QAAQ,EAAE,EADyB;AAEnCC,IAAAA,QAAQ,EAAE,EAFyB;AAGnCC,IAAAA,KAAK,EAAE,EAH4B;AAInCC,IAAAA,IAAI,EAAE,EAJ6B;AAKnCC,IAAAA,QAAQ,EAAE,EALyB;AAMnCC,IAAAA,SAAS,EAAE,EANwB;AAOnCC,IAAAA,OAAO,EAAE;AAAEC,MAAAA,SAAS,EAAE,EAAb;AAAiBC,MAAAA,OAAO,EAAE,EAA1B;AAA8BC,MAAAA,SAAS,EAAE,EAAzC;AAA6CC,MAAAA,WAAW,EAAE;AAA1D;AAP0B,GAAD,CAApC;AASA,QAAMC,EAAE,GAAGlB,QAAQ,CAACC,SAAT,EAAX;AAEA,QAAM,CAACkB,MAAD,EAASC,SAAT,IAAsBtB,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACuB,YAAD,EAAeC,eAAf,IAAkCxB,QAAQ,CAAC,KAAD,CAAhD;;AAEA,QAAMyB,YAAY,GAAGC,CAAC,IAAI;AACxB,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBF,CAAC,CAACG,MAA1B;AACArB,IAAAA,SAAS,CAAC,EACR,GAAGD,MADK;AAER,OAACoB,IAAD,GAAQC;AAFA,KAAD,CAAT;AAID,GAND;;AAQA,QAAME,YAAY,GAAGJ,CAAC,IAAI;AACxBA,IAAAA,CAAC,CAACK,cAAF;AACAT,IAAAA,SAAS,CAAChB,QAAQ,CAACC,MAAD,CAAT,CAAT;AACAiB,IAAAA,eAAe,CAAC,IAAD,CAAf;AACD,GAJD;;AAMAvB,EAAAA,SAAS,CACP,MAAM;AACJ,QAAI+B,MAAM,CAACC,IAAP,CAAYZ,MAAZ,EAAoBa,MAApB,KAA+B,CAA/B,IAAoCX,YAAxC,EAAsD;AACpDlB,MAAAA,QAAQ,GAD4C,CAEpD;;AACAe,MAAAA,EAAE,CAACe,UAAH,CAAc,OAAd,EAAuBC,GAAvB,CAA2B;AACzB;AACA,gBAAQ,QAFiB;AAGzB,gBAAQ,qBAHiB;AAIzB,iBAAS,qBAJgB;AAKzB,oBAAY,QALa;AAMzB,uBAAe;AANU,OAA3B,EAQGC,IARH,CAQSC,MAAD,IAAY;AAChBC,QAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CF,MAAM,CAACG,EAAjD;AACD,OAVH,EAWGC,KAXH,CAWUC,KAAD,IAAW;AAChBJ,QAAAA,OAAO,CAACI,KAAR,CAAc,yBAAd,EAAyCA,KAAzC;AACD,OAbH;AAcD;AACF,GApBM,EAqBP,CAACtB,MAAD,CArBO,CAAT;AAwBA,SAAO;AAAEI,IAAAA,YAAF;AAAgBK,IAAAA,YAAhB;AAA8BvB,IAAAA,MAA9B;AAAsCc,IAAAA;AAAtC,GAAP;AACD,CAtDD;;AAwDA,eAAejB,OAAf","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport firebase from 'firebase';\r\nimport firestore from \"firebase\";\r\n\r\nconst useForm = (callback, validate) => {\r\n  const [values, setValues] = useState({\r\n    username: '',\r\n    activity: '',\r\n    email: '',\r\n    city: '',\r\n    password: '',\r\n    password2: '',\r\n    findFor: { providers: '', clients: '', investors: '', advertising: '' },\r\n  });\r\n  const db = firebase.firestore();\r\n\r\n  const [errors, setErrors] = useState({});\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.target;\r\n    setValues({\r\n      ...values,\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    setErrors(validate(values));\r\n    setIsSubmitting(true);\r\n  };\r\n\r\n  useEffect(\r\n    () => {\r\n      if (Object.keys(errors).length === 0 && isSubmitting) {\r\n        callback();\r\n        // token = db.instance.collection('users').doc().id;\r\n        db.collection(\"users\").add({\r\n          // 'token': token,\r\n          'city': 'Rostov',\r\n          'desc': 'Company description',\r\n          'email': 'groshevdg@gmail.com',\r\n          'password': '123456',\r\n          'companyName': 'CoHelper',\r\n        })\r\n          .then((docRef) => {\r\n            console.log(\"Document written with ID: \", docRef.id);\r\n          })\r\n          .catch((error) => {\r\n            console.error(\"Error adding document: \", error);\r\n          });\r\n      }\r\n    },\r\n    [errors]\r\n  );\r\n\r\n  return { handleChange, handleSubmit, values, errors };\r\n};\r\n\r\nexport default useForm;"]},"metadata":{},"sourceType":"module"}