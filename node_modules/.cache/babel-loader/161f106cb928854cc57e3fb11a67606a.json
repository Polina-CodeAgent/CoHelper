{"ast":null,"code":"import firebase from 'firebase';\nexport default function validateInfo(values) {\n  let errors = {};\n  const db = firebase.firestore();\n\n  const func = async () => {\n    console.log('async start');\n    const t = await db.collection(\"users\").get().then(querySnapshot => {\n      querySnapshot.forEach(doc => {\n        console.log(values.email == doc.data().email);\n\n        if (values.email == doc.data().email) {\n          errors.email = 'Email уже есть в базе!';\n        }\n      });\n    });\n  };\n\n  if (!values.username.trim()) {\n    errors.username = 'Введите название!';\n  }\n\n  if (!(values.activity !== '0')) {\n    errors.activity = 'Сделайте выбор!';\n  }\n\n  if (!values.city.trim()) {\n    errors.city = 'Введите местоположение!';\n  }\n\n  if (!values.email) {\n    errors.email = 'Введите email!';\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\n    errors.email = 'Email введен неверно!';\n  } else {\n    func();\n  }\n\n  if (!values.password) {\n    errors.password = 'Введите пароль!';\n  } else if (values.password.length < 6) {\n    errors.password = 'Минимум 6 символов!';\n  }\n\n  if (!values.password2) {\n    errors.password2 = 'Введите пароль!';\n  } else if (values.password2 !== values.password) {\n    errors.password2 = 'Пароль не подтвержден!';\n  }\n\n  if (!(values.findFor.advertising || values.findFor.clients || values.findFor.providers || values.findFor.investors)) {\n    errors.findFor = 'Выберите хотя бы один вариант';\n  }\n\n  console.log(errors);\n\n  async function f() {\n    let promise = new Promise((resolve, reject) => {\n      setTimeout(() => resolve(\"done!\"), 1000);\n    });\n    let result = await promise; // wait until the promise resolves (*)\n\n    alert(result); // \"done!\"\n\n    return errors;\n  }\n\n  f();\n}","map":{"version":3,"sources":["C:/Users/a-pol/CoHelper/src/components/RegistrationForm/Elements/validateInfo.js"],"names":["firebase","validateInfo","values","errors","db","firestore","func","console","log","t","collection","get","then","querySnapshot","forEach","doc","email","data","username","trim","activity","city","test","password","length","password2","findFor","advertising","clients","providers","investors","f","promise","Promise","resolve","reject","setTimeout","result","alert"],"mappings":"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","sourcesContent":["import firebase from 'firebase';\r\n\r\nexport default function validateInfo(values) {\r\n  let errors = {};\r\n  const db = firebase.firestore();\r\n\r\n  const func = async () => {\r\n    console.log('async start')\r\n    const t = await db.collection(\"users\").get().then((querySnapshot) => {\r\n      querySnapshot.forEach((doc) => {\r\n        console.log(values.email == doc.data().email)\r\n        if (values.email == doc.data().email) {\r\n          errors.email = 'Email уже есть в базе!';\r\n\r\n        }\r\n      })\r\n    })\r\n\r\n  }\r\n\r\n  if (!values.username.trim()) {\r\n    errors.username = 'Введите название!';\r\n  }\r\n\r\n\r\n  if (!(values.activity !== '0')) {\r\n    errors.activity = 'Сделайте выбор!'\r\n  }\r\n\r\n  if (!values.city.trim()) {\r\n    errors.city = 'Введите местоположение!';\r\n  }\r\n\r\n  if (!values.email) {\r\n    errors.email = 'Введите email!';\r\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\r\n    errors.email = 'Email введен неверно!';\r\n  } else {\r\n    func();\r\n  }\r\n\r\n\r\n\r\n  if (!values.password) {\r\n    errors.password = 'Введите пароль!';\r\n  } else if (values.password.length < 6) {\r\n    errors.password = 'Минимум 6 символов!';\r\n  }\r\n\r\n  if (!values.password2) {\r\n    errors.password2 = 'Введите пароль!';\r\n  } else if (values.password2 !== values.password) {\r\n    errors.password2 = 'Пароль не подтвержден!';\r\n  }\r\n\r\n  if (!(values.findFor.advertising || values.findFor.clients || values.findFor.providers || values.findFor.investors)) {\r\n    errors.findFor = 'Выберите хотя бы один вариант';\r\n  }\r\n  console.log(errors);\r\n  async function f() {\r\n\r\n    let promise = new Promise((resolve, reject) => {\r\n      setTimeout(() => resolve(\"done!\"), 1000)\r\n    });\r\n  \r\n    let result = await promise; // wait until the promise resolves (*)\r\n  \r\n    alert(result); // \"done!\"\r\n    return errors;\r\n  }\r\n  \r\n  f();\r\n  \r\n}"]},"metadata":{},"sourceType":"module"}