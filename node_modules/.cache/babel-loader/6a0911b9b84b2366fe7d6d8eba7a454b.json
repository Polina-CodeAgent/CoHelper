{"ast":null,"code":"import firebase from 'firebase';\nexport default function validateInfo(values) {\n  let errors = {};\n  const db = firebase.firestore();\n\n  if (!values.username.trim()) {\n    errors.username = 'Введите название!';\n  }\n\n  if (!(values.activity !== '0')) {\n    errors.activity = 'Сделайте выбор!';\n  }\n\n  if (!values.city.trim()) {\n    errors.city = 'Введите местоположение!';\n  }\n\n  if (!values.email) {\n    errors.email = 'Введите email!';\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\n    errors.email = 'Email введен неверно!';\n  } else {\n    const t = async () => {\n      await db.collection(\"users\").get().then(querySnapshot => {\n        querySnapshot.forEach(doc => {\n          console.log(db.collection(\"users\").get());\n\n          if (values.email == doc.data().email) {\n            errors.email = 'Email уже есть в базе!';\n          }\n        });\n      }).then(result => {\n        return errors.email;\n      }, error => {\n        return errors;\n      });\n    };\n\n    t();\n  }\n\n  const logCities = async () => {\n    let citiesRef = db.collection('users');\n    let allCities = await citiesRef.get();\n\n    for (const doc of allCities.docs) {\n      console.log(doc.id, '=>', doc.data());\n    }\n  };\n\n  logCities(); // function timeoutPromise(interval) {\n  //   return new Promise((resolve, reject) => {\n  //     setTimeout(function(){\n  //       resolve(\"done\");\n  //     }, interval);\n  //   });\n  // };\n  // async function timeTest() {\n  //   const timeoutPromise1 = timeoutPromise(3000);\n  //   const timeoutPromise2 = timeoutPromise(3000);\n  //   const timeoutPromise3 = timeoutPromise(3000);\n  //   await timeoutPromise1;\n  //   await timeoutPromise2;\n  //   await timeoutPromise3;\n  //   alert('ready')\n  // }\n  // timeTest();\n  // console.log('next')\n\n  if (!values.password) {\n    errors.password = 'Введите пароль!';\n  } else if (values.password.length < 6) {\n    errors.password = 'Минимум 6 символов!';\n  }\n\n  if (!values.password2) {\n    errors.password2 = 'Введите пароль!';\n  } else if (values.password2 !== values.password) {\n    errors.password2 = 'Пароль не подтвержден!';\n  }\n\n  if (!(values.findFor.advertising || values.findFor.clients || values.findFor.providers || values.findFor.investors)) {\n    errors.findFor = 'Выберите хотя бы один вариант';\n  }\n\n  console.log(errors); // return errors;\n}","map":{"version":3,"sources":["C:/Users/a-pol/CoHelper/src/components/RegistrationForm/Elements/validateInfo.js"],"names":["firebase","validateInfo","values","errors","db","firestore","username","trim","activity","city","email","test","t","collection","get","then","querySnapshot","forEach","doc","console","log","data","result","error","logCities","citiesRef","allCities","docs","id","password","length","password2","findFor","advertising","clients","providers","investors"],"mappings":"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","sourcesContent":["import firebase from 'firebase';\r\n\r\nexport default function validateInfo(values) {\r\n  let errors = {};\r\n  const db = firebase.firestore();\r\n  \r\n  if (!values.username.trim()) {\r\n    errors.username = 'Введите название!';\r\n  }\r\n\r\n\r\n  if (!(values.activity !== '0')) {\r\n    errors.activity = 'Сделайте выбор!'\r\n  }\r\n\r\n  if (!values.city.trim()) {\r\n    errors.city = 'Введите местоположение!';\r\n  }\r\n\r\n  if (!values.email) {\r\n    errors.email = 'Введите email!';\r\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\r\n    errors.email = 'Email введен неверно!';\r\n  } else {\r\n    const t = async () => {\r\n       await db.collection(\"users\").get().then((querySnapshot) => {\r\n        querySnapshot.forEach((doc) => {\r\n          console.log(db.collection(\"users\").get())\r\n          if (values.email == doc.data().email) {\r\n            errors.email = 'Email уже есть в базе!';\r\n          }\r\n        })\r\n      }).then(\r\n        result => {\r\n          return(errors.email)\r\n      },\r\n        error => {\r\n          return(errors)\r\n      })\r\n    }\r\n    t();\r\n  }\r\n  const logCities = async () => {\r\n    let citiesRef = db.collection('users');\r\n    let allCities = await citiesRef.get();\r\n    for(const doc of allCities.docs){\r\n      console.log(doc.id, '=>', doc.data());\r\n    }\r\n  }\r\n  logCities();\r\n  // function timeoutPromise(interval) {\r\n  //   return new Promise((resolve, reject) => {\r\n  //     setTimeout(function(){\r\n  //       resolve(\"done\");\r\n  //     }, interval);\r\n  //   });\r\n  // };\r\n\r\n  // async function timeTest() {\r\n  //   const timeoutPromise1 = timeoutPromise(3000);\r\n  //   const timeoutPromise2 = timeoutPromise(3000);\r\n  //   const timeoutPromise3 = timeoutPromise(3000);\r\n  \r\n  //   await timeoutPromise1;\r\n  //   await timeoutPromise2;\r\n  //   await timeoutPromise3;\r\n  //   alert('ready')\r\n  // }\r\n\r\n  // timeTest();\r\n  // console.log('next')\r\n\r\n  if (!values.password) {\r\n    errors.password = 'Введите пароль!';\r\n  } else if (values.password.length < 6) {\r\n    errors.password = 'Минимум 6 символов!';\r\n  }\r\n\r\n  if (!values.password2) {\r\n    errors.password2 = 'Введите пароль!';\r\n  } else if (values.password2 !== values.password) {\r\n    errors.password2 = 'Пароль не подтвержден!';\r\n  }\r\n\r\n  if (!(values.findFor.advertising || values.findFor.clients || values.findFor.providers || values.findFor.investors)) {\r\n    errors.findFor = 'Выберите хотя бы один вариант';\r\n  }\r\n  console.log(errors);\r\n  // return errors;\r\n}"]},"metadata":{},"sourceType":"module"}